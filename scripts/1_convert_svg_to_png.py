import os
import cairosvg
from PIL import Image

input_dir = "dataset/raw_svg"
output_dir = "dataset/processed"
high_res_size = (512, 512)
target_size = (64, 64)

# –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—ñ–≤ (–∞–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–∞–ø–æ–∫ —É raw_svg)
classes = [d for d in os.listdir(input_dir) if os.path.isdir(os.path.join(input_dir, d))]

if not classes:
    raise ValueError("‚ùå –ü–æ–º–∏–ª–∫–∞: –£ –ø–∞–ø—Ü—ñ dataset/raw_svg –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ –∫–ª–∞—Å–∞–º–∏!")

print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å–∏: {', '.join(classes)}")

for cls in classes:
    class_input_path = os.path.join(input_dir, cls)
    class_output_path = os.path.join(output_dir, cls)
    os.makedirs(class_output_path, exist_ok=True)
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É SVG-—Ñ–∞–π–ª—ñ–≤
    svg_files = [f for f in os.listdir(class_input_path) if f.endswith(".svg")]
    if not svg_files:
        print(f"‚ö†Ô∏è –£–≤–∞–≥–∞: –£ –ø–∞–ø—Ü—ñ {cls} –≤—ñ–¥—Å—É—Ç–Ω—ñ SVG-—Ñ–∞–π–ª–∏!")
        continue
    
    print(f"\nüìÅ –û–±—Ä–æ–±–∫–∞ –∫–ª–∞—Å—É '{cls}' ({len(svg_files)} —Ñ–∞–π–ª—ñ–≤):")
    
    for i, svg_file in enumerate(svg_files, 1):
        input_path = os.path.join(class_input_path, svg_file)
        output_path = os.path.join(class_output_path, svg_file.replace(".svg", ".png"))
        temp_file = os.path.join(class_output_path, "temp_high_res.png")
        
        print(f"\n[{i}/{len(svg_files)}] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è {svg_file}...")
        
        try:
            # –ö—Ä–æ–∫ 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è SVG -> —Ç–∏–º—á–∞—Å–æ–≤–∏–π PNG (512x512)
            cairosvg.svg2png(
                url=input_path,
                write_to=temp_file,
                output_width=high_res_size[0],
                output_height=high_res_size[1]
            )
            
            # –ö—Ä–æ–∫ 2: –°—Ç–∏—Å–Ω–µ–Ω–Ω—è –¥–æ —Ü—ñ–ª—å–æ–≤–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
            with Image.open(temp_file) as img:
                img = img.resize(target_size, Image.Resampling.LANCZOS)
                img.save(output_path)
            
            os.remove(temp_file)
            print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {output_path}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            if os.path.exists(temp_file):
                os.remove(temp_file)

print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–ø–∫—É dataset/processed.")